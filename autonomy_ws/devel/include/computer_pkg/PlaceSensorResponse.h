// Generated by gencpp from file computer_pkg/PlaceSensorResponse.msg
// DO NOT EDIT!


#ifndef COMPUTER_PKG_MESSAGE_PLACESENSORRESPONSE_H
#define COMPUTER_PKG_MESSAGE_PLACESENSORRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace computer_pkg
{
template <class ContainerAllocator>
struct PlaceSensorResponse_
{
  typedef PlaceSensorResponse_<ContainerAllocator> Type;

  PlaceSensorResponse_()
    : target_latitude(0.0)
    , target_longitude(0.0)  {
    }
  PlaceSensorResponse_(const ContainerAllocator& _alloc)
    : target_latitude(0.0)
    , target_longitude(0.0)  {
  (void)_alloc;
    }



   typedef double _target_latitude_type;
  _target_latitude_type target_latitude;

   typedef double _target_longitude_type;
  _target_longitude_type target_longitude;





  typedef boost::shared_ptr< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PlaceSensorResponse_

typedef ::computer_pkg::PlaceSensorResponse_<std::allocator<void> > PlaceSensorResponse;

typedef boost::shared_ptr< ::computer_pkg::PlaceSensorResponse > PlaceSensorResponsePtr;
typedef boost::shared_ptr< ::computer_pkg::PlaceSensorResponse const> PlaceSensorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator1> & lhs, const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator2> & rhs)
{
  return lhs.target_latitude == rhs.target_latitude &&
    lhs.target_longitude == rhs.target_longitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator1> & lhs, const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace computer_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b1f2bd693b2ac93950ddc44a5453ced";
  }

  static const char* value(const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b1f2bd693b2ac93ULL;
  static const uint64_t static_value2 = 0x950ddc44a5453cedULL;
};

template<class ContainerAllocator>
struct DataType< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "computer_pkg/PlaceSensorResponse";
  }

  static const char* value(const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 target_latitude\n"
"float64 target_longitude\n"
;
  }

  static const char* value(const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_latitude);
      stream.next(m.target_longitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlaceSensorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::computer_pkg::PlaceSensorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::computer_pkg::PlaceSensorResponse_<ContainerAllocator>& v)
  {
    s << indent << "target_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.target_latitude);
    s << indent << "target_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.target_longitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMPUTER_PKG_MESSAGE_PLACESENSORRESPONSE_H
