# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from computer_msgs/AiDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AiDetection(genpy.Message):
  _md5sum = "66b7593eed3e8ef91f597c785c6a914f"
  _type = "computer_msgs/AiDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 timestamp_ns
uint32 class_id
uint32 frame_id
string class_name
string cam
float32 class_confidence
float32 detection_confidence
float32 x_min
float32 y_min
float32 x_max
float32 y_max
"""
  __slots__ = ['timestamp_ns','class_id','frame_id','class_name','cam','class_confidence','detection_confidence','x_min','y_min','x_max','y_max']
  _slot_types = ['int64','uint32','uint32','string','string','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_ns,class_id,frame_id,class_name,cam,class_confidence,detection_confidence,x_min,y_min,x_max,y_max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AiDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_ns is None:
        self.timestamp_ns = 0
      if self.class_id is None:
        self.class_id = 0
      if self.frame_id is None:
        self.frame_id = 0
      if self.class_name is None:
        self.class_name = ''
      if self.cam is None:
        self.cam = ''
      if self.class_confidence is None:
        self.class_confidence = 0.
      if self.detection_confidence is None:
        self.detection_confidence = 0.
      if self.x_min is None:
        self.x_min = 0.
      if self.y_min is None:
        self.y_min = 0.
      if self.x_max is None:
        self.x_max = 0.
      if self.y_max is None:
        self.y_max = 0.
    else:
      self.timestamp_ns = 0
      self.class_id = 0
      self.frame_id = 0
      self.class_name = ''
      self.cam = ''
      self.class_confidence = 0.
      self.detection_confidence = 0.
      self.x_min = 0.
      self.y_min = 0.
      self.x_max = 0.
      self.y_max = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2I().pack(_x.timestamp_ns, _x.class_id, _x.frame_id))
      _x = self.class_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cam
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f().pack(_x.class_confidence, _x.detection_confidence, _x.x_min, _x.y_min, _x.x_max, _x.y_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp_ns, _x.class_id, _x.frame_id,) = _get_struct_q2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cam = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cam = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.class_confidence, _x.detection_confidence, _x.x_min, _x.y_min, _x.x_max, _x.y_max,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2I().pack(_x.timestamp_ns, _x.class_id, _x.frame_id))
      _x = self.class_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cam
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f().pack(_x.class_confidence, _x.detection_confidence, _x.x_min, _x.y_min, _x.x_max, _x.y_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp_ns, _x.class_id, _x.frame_id,) = _get_struct_q2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cam = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cam = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.class_confidence, _x.detection_confidence, _x.x_min, _x.y_min, _x.x_max, _x.y_max,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_q2I = None
def _get_struct_q2I():
    global _struct_q2I
    if _struct_q2I is None:
        _struct_q2I = struct.Struct("<q2I")
    return _struct_q2I
