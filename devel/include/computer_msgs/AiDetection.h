// Generated by gencpp from file computer_msgs/AiDetection.msg
// DO NOT EDIT!


#ifndef COMPUTER_MSGS_MESSAGE_AIDETECTION_H
#define COMPUTER_MSGS_MESSAGE_AIDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace computer_msgs
{
template <class ContainerAllocator>
struct AiDetection_
{
  typedef AiDetection_<ContainerAllocator> Type;

  AiDetection_()
    : timestamp_ns(0)
    , class_id(0)
    , frame_id(0)
    , class_name()
    , cam()
    , class_confidence(0.0)
    , detection_confidence(0.0)
    , x_min(0.0)
    , y_min(0.0)
    , x_max(0.0)
    , y_max(0.0)  {
    }
  AiDetection_(const ContainerAllocator& _alloc)
    : timestamp_ns(0)
    , class_id(0)
    , frame_id(0)
    , class_name(_alloc)
    , cam(_alloc)
    , class_confidence(0.0)
    , detection_confidence(0.0)
    , x_min(0.0)
    , y_min(0.0)
    , x_max(0.0)
    , y_max(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _timestamp_ns_type;
  _timestamp_ns_type timestamp_ns;

   typedef uint32_t _class_id_type;
  _class_id_type class_id;

   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cam_type;
  _cam_type cam;

   typedef float _class_confidence_type;
  _class_confidence_type class_confidence;

   typedef float _detection_confidence_type;
  _detection_confidence_type detection_confidence;

   typedef float _x_min_type;
  _x_min_type x_min;

   typedef float _y_min_type;
  _y_min_type y_min;

   typedef float _x_max_type;
  _x_max_type x_max;

   typedef float _y_max_type;
  _y_max_type y_max;





  typedef boost::shared_ptr< ::computer_msgs::AiDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::computer_msgs::AiDetection_<ContainerAllocator> const> ConstPtr;

}; // struct AiDetection_

typedef ::computer_msgs::AiDetection_<std::allocator<void> > AiDetection;

typedef boost::shared_ptr< ::computer_msgs::AiDetection > AiDetectionPtr;
typedef boost::shared_ptr< ::computer_msgs::AiDetection const> AiDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::computer_msgs::AiDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::computer_msgs::AiDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::computer_msgs::AiDetection_<ContainerAllocator1> & lhs, const ::computer_msgs::AiDetection_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_ns == rhs.timestamp_ns &&
    lhs.class_id == rhs.class_id &&
    lhs.frame_id == rhs.frame_id &&
    lhs.class_name == rhs.class_name &&
    lhs.cam == rhs.cam &&
    lhs.class_confidence == rhs.class_confidence &&
    lhs.detection_confidence == rhs.detection_confidence &&
    lhs.x_min == rhs.x_min &&
    lhs.y_min == rhs.y_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_max == rhs.y_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::computer_msgs::AiDetection_<ContainerAllocator1> & lhs, const ::computer_msgs::AiDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace computer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::computer_msgs::AiDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::computer_msgs::AiDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::computer_msgs::AiDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::computer_msgs::AiDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::computer_msgs::AiDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::computer_msgs::AiDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::computer_msgs::AiDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66b7593eed3e8ef91f597c785c6a914f";
  }

  static const char* value(const ::computer_msgs::AiDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66b7593eed3e8ef9ULL;
  static const uint64_t static_value2 = 0x1f597c785c6a914fULL;
};

template<class ContainerAllocator>
struct DataType< ::computer_msgs::AiDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "computer_msgs/AiDetection";
  }

  static const char* value(const ::computer_msgs::AiDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::computer_msgs::AiDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 timestamp_ns\n"
"uint32 class_id\n"
"uint32 frame_id\n"
"string class_name\n"
"string cam\n"
"float32 class_confidence\n"
"float32 detection_confidence\n"
"float32 x_min\n"
"float32 y_min\n"
"float32 x_max\n"
"float32 y_max\n"
;
  }

  static const char* value(const ::computer_msgs::AiDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::computer_msgs::AiDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_ns);
      stream.next(m.class_id);
      stream.next(m.frame_id);
      stream.next(m.class_name);
      stream.next(m.cam);
      stream.next(m.class_confidence);
      stream.next(m.detection_confidence);
      stream.next(m.x_min);
      stream.next(m.y_min);
      stream.next(m.x_max);
      stream.next(m.y_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AiDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::computer_msgs::AiDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::computer_msgs::AiDetection_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_ns: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_ns);
    s << indent << "class_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "cam: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cam);
    s << indent << "class_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.class_confidence);
    s << indent << "detection_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.detection_confidence);
    s << indent << "x_min: ";
    Printer<float>::stream(s, indent + "  ", v.x_min);
    s << indent << "y_min: ";
    Printer<float>::stream(s, indent + "  ", v.y_min);
    s << indent << "x_max: ";
    Printer<float>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_max: ";
    Printer<float>::stream(s, indent + "  ", v.y_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMPUTER_MSGS_MESSAGE_AIDETECTION_H
